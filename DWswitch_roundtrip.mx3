// flags
notch_flag := 0
unotch_only := 0
edge_rough := 0
preload_geom := 0
SnapshotFormat = "png"
Temp = 0
ThermSeed(0)
random_seed := 0
// geometry
sizeX := 160e-9
sizeY := 15e-9
sizeZ := 3e-9
hm_sizeZ := sizeZ
fm_cross_sec := sizeY * sizeZ
hm_cross_sec := sizeY * hm_sizeZ
notch_diam := 8e-9
rough_diam := 1e-9
notch_space_L := 50e-9

// length spec for trapezoid
w1 := sizeY
w2 := sizeY
angle := Asin(0.5 * (w2 - w1) / sizeX)
notch_space := notch_space_L / cos(angle)

Nx := 160
Ny := 15

magAn := 7e5

setgridsize(Nx, Ny, 1)
setcellsize(sizeX/Nx, sizeY/Ny, sizeZ)
if preload_geom == 1 {
	setGeom(imageShape("STTPMA_rough.png"))
} else {
	if edge_rough == 1 { // construct channel from variable position rectangles
		maxrect := sizeX / rough_diam
		xcenter := -0.5 * (sizeX - rough_diam)
		xheight := (xcenter+(0.5*sizeX))*((w2-w1)/sizeX) + w1
		baserect := rect(rough_diam, w1+(0.5*rough_diam*randNorm())).transl(xcenter, 0.5*rough_diam*randNorm(), 0)
		for i := 1; i < maxrect; i++ {
			randSeed(random_seed)
			random_seed += 1
			xcenter = xcenter + rough_diam
			xheight = (xcenter+(0.5*sizeX))*((w2-w1)/sizeX) + w1
			baserect = baserect.add(rect(rough_diam, xheight+(0.5*rough_diam*randNorm())).transl(xcenter, 0.5*rough_diam*randNorm(), 0))
		}
		if notch_flag == 1 {
			notch := circle(notch_diam).repeat(25e-9, 0, 0)
			unotch := notch.transl(0, 0.25*(w1+w2), 0).rotz(angle)
			lnotch := notch.transl(0, -0.25*(w1+w2), 0).rotz(-angle)
			setGeom(baserect.sub(unotch).sub(lnotch))
			saveAs(geom, "SOTPMA_rough_notch")
		} else {
			setGeom(baserect)
			saveAs(geom, "SOTPMA_rough")
		}
	} else {
		uhrect := rect(2*sizeX, sizeY).sub(rect(2*sizeX, 0.5*sizeY).transl(0, -0.25*sizeY, 0))
		utilt := uhrect.transl(0, 0.25*(w1+w2), 0).rotz(angle)
		lhrect := rect(2*sizeX, sizeY).sub(rect(2*sizeX, 0.5*sizeY).transl(0, 0.25*sizeY, 0))
		ltilt := lhrect.transl(0, -0.25*(w1+w2), 0).rotz(-angle)
		baserect := rect(sizeX, sizeY).sub(utilt).sub(ltilt)
		if notch_flag == 1 {
			notch := circle(notch_diam).repeat(notch_space, 0, 0).transl(0.5*notch_space_L, 0, 0)
			if unotch_only == 1 {
				unotch := notch.transl(0, 0.25*(w1+w2), 0).rotz(angle)
				setGeom(baserect.sub(unotch))
				saveAs(geom, "STTPMA_smooth_notch")
			} else if unotch_only == -1 {
				lnotch := notch.transl(0, -0.25*(w1+w2), 0).rotz(-angle)
				setGeom(baserect.sub(lnotch))
				saveAs(geom, "STTPMA_smooth_notch")
			} else {
				unotch := notch.transl(0, 0.25*(w1+w2), 0).rotz(angle)
				lnotch := notch.transl(0, -0.25*(w1+w2), 0).rotz(-angle)
				setGeom(baserect.sub(unotch).sub(lnotch))
				saveAs(geom, "STTPMA_smooth_notch")
			}

		} else {
			setGeom(baserect)
			saveAs(geom, "SOTPMA_smooth")
		}
	}
}

fixed_w := 5e-9
grainSize := 1e-9
randomSeed := 0
maxRegion := 253
regionWidth := (sizeX - 2*fixed_w) / maxRegion
randK := 0.0125 // 0.2 results in 15.8 degree maximum deflection, 0.23 --> 18 degrees
varK := 0.025
offsetDistance := 25e-9
oxideWidth := 15e-9

/* This is the Block that will split up the DW into the equation */
/* VCMA */

defregion(254, rect(fixed_w, sizeY).transl(-((0.5*sizeX)-(0.5*fixed_w)), 0, 0))
defregion(255, rect(fixed_w, sizeY).transl(((0.5*sizeX)-(0.5*fixed_w)), 0, 0))
startpos := 50e-9
m = TwoDomain(0, 0, 1,     1, 0, 0,    0, 0, -1).transl(-(0.5*sizeX)+startpos+fixed_w, 0, 0)
m.setRegion(254, uniform(0, 0, 1))
m.setRegion(255, uniform(0, 0, -1))
frozenspins.setRegion(254, 254)
frozenspins.setRegion(255, 255)
EdgeSmooth = 8

// material params
Ms := 8e5 //Magnetic Saturation
Msat = Ms
Aex = 1.3e-11
al := 0.05
alpha = al
// Ku1 = 5e5
AnisU = vector(0, 0, 1)
dmi := -0.5e-3
Dind = dmi

// STT
Xi = 0.05
stt_P := 0.7

// SHE
sot_P := 0.2
scale2hm := sot_P / stt_P
// pol = sot_P
pol = stt_P

// Rashba
u_B := 9.274e-24
alpha_R := 2e-30

// spacer layer
lambda = 1
epsilonprime = 0
fixedlayer = vector(0, -1, 0)
// fixedlayer = vector(0, 0, -1)

// current
I_pulse := -8e-6
I := I_pulse
fm2hm := 0.5 // fraction current through fm
j_fm := 0.0
j_hm := 0.0

// relax magnetization
relax()

// add center magnetization to output & run
mx_mid := cropY(m.Comp(2), floor(Ny/2), floor(Ny/2+1))
tableAdd(mx_mid)
tableAddVar(I, "I_x", "A")
tableAdd(Ku1)
tableautosave(10e-12)

j_x := -1.0e+10
j_stt := j_x
j_sot := j_x
j_sttAMTJ := j_x
j_sotAMTJ := j_x
tau_RE := (alpha_R * (j_stt / 2) * stt_P) / (u_B * Ms)
tau_REAMTJ := (alpha_R * (j_sttAMTJ / 2) * stt_P) / (u_B * Ms)

dt_step := 0.05e-09

p_dur := 1.0e-09
repeat := 3
rest := 3e-9
VCMA_dur := 1
run(rest) //Hold at lower position with VCMA

