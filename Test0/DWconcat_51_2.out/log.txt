//mumax 3.10 [linux_amd64 go1.14(gc) CUDA-11.0]
//GPU info: Quadro RTX 4000(7973MB), CUDA Driver 11.4, cc=7.5, using cc=75 PTX
//(c) Arne Vansteenkiste, Dynamat LAB, Ghent University, Belgium
//This is free software without any warranty. See license.txt
//********************************************************************//
//  If you use mumax in any work or publication,                      //
//  we kindly ask you to cite the references in references.bib        //
//********************************************************************//
//output directory: DWconcat_51_2.out/
notch_flag := 0
unotch_only := 0
edge_rough := 0
preload_geom := 0
SnapshotFormat = "png"
Temp = 0
ThermSeed(0)
random_seed := 0
sizeX := 1.35e-07
sizeY := 15e-9
sizeZ := 3e-9
hm_sizeZ := sizeZ
fm_cross_sec := sizeY * sizeZ
hm_cross_sec := sizeY * hm_sizeZ
notch_diam := 8e-9
rough_diam := 1e-9
notch_space_L := 50e-9
w1 := sizeY
w2 := sizeY
angle := Asin(0.5 * (w2 - w1) / sizeX)
notch_space := notch_space_L / cos(angle)
Nx := 135
Ny := 15
magAn := 4.70e+05
setgridsize(Nx, Ny, 1)
setcellsize(sizeX/Nx, sizeY/Ny, sizeZ)
if preload_geom == 1 {
	setGeom(imageShape("STTPMA_rough.png"))
} else {
	if edge_rough == 1 {
		maxrect := sizeX / rough_diam
		xcenter := -0.5 * (sizeX - rough_diam)
		xheight := (xcenter+(0.5*sizeX))*((w2-w1)/sizeX) + w1
		baserect := rect(rough_diam, w1+(0.5*rough_diam*randNorm())).transl(xcenter, 0.5*rough_diam*randNorm(), 0)
		for i := 1; i < maxrect; i++ {
			randSeed(random_seed)
			random_seed += 1
			xcenter = xcenter + rough_diam
			xheight = (xcenter+(0.5*sizeX))*((w2-w1)/sizeX) + w1
			baserect = baserect.add(rect(rough_diam, xheight+(0.5*rough_diam*randNorm())).transl(xcenter, 0.5*rough_diam*randNorm(), 0))
		}
		if notch_flag == 1 {
			notch := circle(notch_diam).repeat(25e-9, 0, 0)
			unotch := notch.transl(0, 0.25*(w1+w2), 0).rotz(angle)
			lnotch := notch.transl(0, -0.25*(w1+w2), 0).rotz(-angle)
			setGeom(baserect.sub(unotch).sub(lnotch))
			saveAs(geom, "SOTPMA_rough_notch")
		} else {
			setGeom(baserect)
			saveAs(geom, "SOTPMA_rough")
		}
	} else {
		uhrect := rect(2*sizeX, sizeY).sub(rect(2*sizeX, 0.5*sizeY).transl(0, -0.25*sizeY, 0))
		utilt := uhrect.transl(0, 0.25*(w1+w2), 0).rotz(angle)
		lhrect := rect(2*sizeX, sizeY).sub(rect(2*sizeX, 0.5*sizeY).transl(0, 0.25*sizeY, 0))
		ltilt := lhrect.transl(0, -0.25*(w1+w2), 0).rotz(-angle)
		baserect := rect(sizeX, sizeY).sub(utilt).sub(ltilt)
		if notch_flag == 1 {
			notch := circle(notch_diam).repeat(notch_space, 0, 0).transl(0.5*notch_space_L, 0, 0)
			if unotch_only == 1 {
				unotch := notch.transl(0, 0.25*(w1+w2), 0).rotz(angle)
				setGeom(baserect.sub(unotch))
				saveAs(geom, "STTPMA_smooth_notch")
			} else if unotch_only == -1 {
				lnotch := notch.transl(0, -0.25*(w1+w2), 0).rotz(-angle)
				setGeom(baserect.sub(lnotch))
				saveAs(geom, "STTPMA_smooth_notch")
			} else {
				unotch := notch.transl(0, 0.25*(w1+w2), 0).rotz(angle)
				lnotch := notch.transl(0, -0.25*(w1+w2), 0).rotz(-angle)
				setGeom(baserect.sub(unotch).sub(lnotch))
				saveAs(geom, "STTPMA_smooth_notch")
			}
		} else {
			setGeom(baserect)
			saveAs(geom, "SOTPMA_smooth")
		}
	}
}
fixed_w := 5.00e-09
grainSize := 1e-9
randomSeed := 51
maxRegion := 253
regionWidth := (sizeX - 2*fixed_w) / maxRegion
randK := 0.0125
varK := 0.025
offsetDistance := 2.25e-08
oxideWidth := 1.50e-08
for i := 0; i <= maxRegion; i++ {
	xLoc := (i * regionWidth) - (0.5 * sizeX) + fixed_w
	midpoint := xLoc + regionWidth/2
	defregion(i, rect(regionWidth, sizeY).transl(midpoint, 0, 0))
	sMidpoint := midpoint / 1e-9
	magVal := 4.88074019590981 + (-2.99219411611410e-05 * sMidpoint) + (-0.000432730246558269 * pow(sMidpoint, 2))
	magVal = magVal + (6.89289264204922e-08 * pow(sMidpoint, 3)) + (2.72096040781391e-07 * pow(sMidpoint, 4))
	magVal = magVal + (-4.84756604766916e-11 * pow(sMidpoint, 5)) + (2.27421161847804e-11 * pow(sMidpoint, 6))
	magVal = magVal + (1.48725794080439e-14 * pow(sMidpoint, 7)) + (-5.07091377189594e-14 * pow(sMidpoint, 8))
	magVal = magVal + (-2.15271398114348e-18 * pow(sMidpoint, 9)) + (1.29466529825287e-17 * pow(sMidpoint, 10))
	magVal = magVal + (1.20738451272334e-22 * pow(sMidpoint, 11)) + (-1.03762546194828e-21 * pow(sMidpoint, 12))
	magVal = magVal * 1e5
	Ku1.setRegion(i, magVal)
}
defregion(254, rect(fixed_w, sizeY).transl(-((0.5*sizeX)-(0.5*fixed_w)), 0, 0))
defregion(255, rect(fixed_w, sizeY).transl(((0.5*sizeX)-(0.5*fixed_w)), 0, 0))
startpos := 3.50e-08
m = TwoDomain(0, 0, 1, 1, 0, 0, 0, 0, -1).transl(-(0.5*sizeX)+startpos+fixed_w, 0, 0)
m.setRegion(254, uniform(0, 0, 1))
m.setRegion(255, uniform(0, 0, -1))
frozenspins.setRegion(254, 254)
frozenspins.setRegion(255, 255)
EdgeSmooth = 8
Ms := 800e3
Msat = Ms
Aex = 1.3e-11
al := 0.05
alpha = al
AnisU = vector(0, 0, 1)
dmi := -0.5e-3
Dind = dmi
Xi = 0.05
stt_P := 0.7
sot_P := 0.2
scale2hm := sot_P / stt_P
pol = sot_P
u_B := 9.274e-24
alpha_R := 2e-30
lambda = 1
epsilonprime = 0
fixedlayer = vector(0, -1, 0)
I_pulse := -8e-6
I := I_pulse
fm2hm := 0.5
j_fm := 0.0
j_hm := 0.0
j_stt := 0.0
j_sot := 0.0
relax()
mx_mid := cropY(m.Comp(2), floor(Ny/2), floor(Ny/2+1))
tableAdd(mx_mid)
tableAddVar(I, "I_x", "A")
tableautosave(10e-12)
tau_RE := 0.00000
dt_step := 0.05e-09
j_x0 := -0.00000e+00
j_stt0 := -0.00000e+00
j_sot0 := -0.00000e+00
J = vector(j_stt0, 0, j_sot0)
tau_RE = (alpha_R * (j_stt0 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x1 := -0.00000e+00
j_stt1 := -0.00000e+00
j_sot1 := -0.00000e+00
J = vector(j_stt1, 0, j_sot1)
tau_RE = (alpha_R * (j_stt1 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x2 := -0.00000e+00
j_stt2 := -0.00000e+00
j_sot2 := -0.00000e+00
J = vector(j_stt2, 0, j_sot2)
tau_RE = (alpha_R * (j_stt2 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x3 := -0.00000e+00
j_stt3 := -0.00000e+00
j_sot3 := -0.00000e+00
J = vector(j_stt3, 0, j_sot3)
tau_RE = (alpha_R * (j_stt3 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x4 := -0.00000e+00
j_stt4 := -0.00000e+00
j_sot4 := -0.00000e+00
J = vector(j_stt4, 0, j_sot4)
tau_RE = (alpha_R * (j_stt4 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x5 := -0.00000e+00
j_stt5 := -0.00000e+00
j_sot5 := -0.00000e+00
J = vector(j_stt5, 0, j_sot5)
tau_RE = (alpha_R * (j_stt5 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x6 := -0.00000e+00
j_stt6 := -0.00000e+00
j_sot6 := -0.00000e+00
J = vector(j_stt6, 0, j_sot6)
tau_RE = (alpha_R * (j_stt6 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x7 := -0.00000e+00
j_stt7 := -0.00000e+00
j_sot7 := -0.00000e+00
J = vector(j_stt7, 0, j_sot7)
tau_RE = (alpha_R * (j_stt7 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x8 := -0.00000e+00
j_stt8 := -0.00000e+00
j_sot8 := -0.00000e+00
J = vector(j_stt8, 0, j_sot8)
tau_RE = (alpha_R * (j_stt8 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x9 := -0.00000e+00
j_stt9 := -0.00000e+00
j_sot9 := -0.00000e+00
J = vector(j_stt9, 0, j_sot9)
tau_RE = (alpha_R * (j_stt9 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x10 := -0.00000e+00
j_stt10 := -0.00000e+00
j_sot10 := -0.00000e+00
J = vector(j_stt10, 0, j_sot10)
tau_RE = (alpha_R * (j_stt10 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x11 := -0.00000e+00
j_stt11 := -0.00000e+00
j_sot11 := -0.00000e+00
J = vector(j_stt11, 0, j_sot11)
tau_RE = (alpha_R * (j_stt11 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x12 := -0.00000e+00
j_stt12 := -0.00000e+00
j_sot12 := -0.00000e+00
J = vector(j_stt12, 0, j_sot12)
tau_RE = (alpha_R * (j_stt12 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x13 := -0.00000e+00
j_stt13 := -0.00000e+00
j_sot13 := -0.00000e+00
J = vector(j_stt13, 0, j_sot13)
tau_RE = (alpha_R * (j_stt13 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x14 := -0.00000e+00
j_stt14 := -0.00000e+00
j_sot14 := -0.00000e+00
J = vector(j_stt14, 0, j_sot14)
tau_RE = (alpha_R * (j_stt14 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x15 := -0.00000e+00
j_stt15 := -0.00000e+00
j_sot15 := -0.00000e+00
J = vector(j_stt15, 0, j_sot15)
tau_RE = (alpha_R * (j_stt15 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x16 := -0.00000e+00
j_stt16 := -0.00000e+00
j_sot16 := -0.00000e+00
J = vector(j_stt16, 0, j_sot16)
tau_RE = (alpha_R * (j_stt16 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x17 := -0.00000e+00
j_stt17 := -0.00000e+00
j_sot17 := -0.00000e+00
J = vector(j_stt17, 0, j_sot17)
tau_RE = (alpha_R * (j_stt17 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x18 := -0.00000e+00
j_stt18 := -0.00000e+00
j_sot18 := -0.00000e+00
J = vector(j_stt18, 0, j_sot18)
tau_RE = (alpha_R * (j_stt18 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x19 := -0.00000e+00
j_stt19 := -0.00000e+00
j_sot19 := -0.00000e+00
J = vector(j_stt19, 0, j_sot19)
tau_RE = (alpha_R * (j_stt19 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x20 := -5.30423e-04
ext_makegrains(grainSize, maxRegion, randomSeed)
for i := 0; i <= maxRegion; i++ {
	Ku1.setRegion(i, 5e5+((2*(rand()-0.5))*5e5*varK))
}
j_stt20 := -1.51549e-04
j_sot20 := -3.78873e-04
J = vector(j_stt20, 0, j_sot20)
tau_RE = (alpha_R * (j_stt20 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x21 := -2.57000e+10
j_stt21 := -7.34286e+09
j_sot21 := -1.83571e+10
J = vector(j_stt21, 0, j_sot21)
tau_RE = (alpha_R * (j_stt21 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x22 := -2.57000e+10
j_stt22 := -7.34286e+09
j_sot22 := -1.83571e+10
J = vector(j_stt22, 0, j_sot22)
tau_RE = (alpha_R * (j_stt22 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x23 := -2.57000e+10
j_stt23 := -7.34286e+09
j_sot23 := -1.83571e+10
J = vector(j_stt23, 0, j_sot23)
tau_RE = (alpha_R * (j_stt23 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x24 := -2.57000e+10
j_stt24 := -7.34286e+09
j_sot24 := -1.83571e+10
J = vector(j_stt24, 0, j_sot24)
tau_RE = (alpha_R * (j_stt24 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x25 := -2.57000e+10
j_stt25 := -7.34286e+09
j_sot25 := -1.83571e+10
J = vector(j_stt25, 0, j_sot25)
tau_RE = (alpha_R * (j_stt25 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x26 := -2.57000e+10
j_stt26 := -7.34286e+09
j_sot26 := -1.83571e+10
J = vector(j_stt26, 0, j_sot26)
tau_RE = (alpha_R * (j_stt26 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x27 := -2.57000e+10
j_stt27 := -7.34286e+09
j_sot27 := -1.83571e+10
J = vector(j_stt27, 0, j_sot27)
tau_RE = (alpha_R * (j_stt27 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x28 := -2.57000e+10
j_stt28 := -7.34286e+09
j_sot28 := -1.83571e+10
J = vector(j_stt28, 0, j_sot28)
tau_RE = (alpha_R * (j_stt28 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x29 := -2.57000e+10
j_stt29 := -7.34286e+09
j_sot29 := -1.83571e+10
J = vector(j_stt29, 0, j_sot29)
tau_RE = (alpha_R * (j_stt29 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x30 := -2.57000e+10
j_stt30 := -7.34286e+09
j_sot30 := -1.83571e+10
J = vector(j_stt30, 0, j_sot30)
tau_RE = (alpha_R * (j_stt30 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x31 := -2.57000e+10
j_stt31 := -7.34286e+09
j_sot31 := -1.83571e+10
J = vector(j_stt31, 0, j_sot31)
tau_RE = (alpha_R * (j_stt31 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x32 := -2.57000e+10
j_stt32 := -7.34286e+09
j_sot32 := -1.83571e+10
J = vector(j_stt32, 0, j_sot32)
tau_RE = (alpha_R * (j_stt32 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x33 := -2.57000e+10
j_stt33 := -7.34286e+09
j_sot33 := -1.83571e+10
J = vector(j_stt33, 0, j_sot33)
tau_RE = (alpha_R * (j_stt33 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x34 := -2.57000e+10
j_stt34 := -7.34286e+09
j_sot34 := -1.83571e+10
J = vector(j_stt34, 0, j_sot34)
tau_RE = (alpha_R * (j_stt34 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x35 := -2.57000e+10
j_stt35 := -7.34286e+09
j_sot35 := -1.83571e+10
J = vector(j_stt35, 0, j_sot35)
tau_RE = (alpha_R * (j_stt35 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x36 := -2.57000e+10
j_stt36 := -7.34286e+09
j_sot36 := -1.83571e+10
J = vector(j_stt36, 0, j_sot36)
tau_RE = (alpha_R * (j_stt36 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x37 := -2.57000e+10
j_stt37 := -7.34286e+09
j_sot37 := -1.83571e+10
J = vector(j_stt37, 0, j_sot37)
tau_RE = (alpha_R * (j_stt37 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x38 := -2.57000e+10
j_stt38 := -7.34286e+09
j_sot38 := -1.83571e+10
J = vector(j_stt38, 0, j_sot38)
tau_RE = (alpha_R * (j_stt38 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x39 := -2.57000e+10
j_stt39 := -7.34286e+09
j_sot39 := -1.83571e+10
J = vector(j_stt39, 0, j_sot39)
tau_RE = (alpha_R * (j_stt39 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x40 := -4.30348e+07
j_stt40 := -1.22956e+07
j_sot40 := -3.07391e+07
J = vector(j_stt40, 0, j_sot40)
tau_RE = (alpha_R * (j_stt40 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x41 := -0.00000e+00
for i := 0; i <= maxRegion; i++ {
	xLoc := (i * regionWidth) - (0.5 * sizeX) + fixed_w
	midpoint := xLoc + regionWidth/2
	defregion(i, rect(regionWidth, sizeY).transl(midpoint, 0, 0))
	sMidpoint := midpoint / 1e-9
	magVal := 4.88074019590981 + (-2.99219411611410e-05 * sMidpoint) + (-0.000432730246558269 * pow(sMidpoint, 2))
	magVal = magVal + (6.89289264204922e-08 * pow(sMidpoint, 3)) + (2.72096040781391e-07 * pow(sMidpoint, 4))
	magVal = magVal + (-4.84756604766916e-11 * pow(sMidpoint, 5)) + (2.27421161847804e-11 * pow(sMidpoint, 6))
	magVal = magVal + (1.48725794080439e-14 * pow(sMidpoint, 7)) + (-5.07091377189594e-14 * pow(sMidpoint, 8))
	magVal = magVal + (-2.15271398114348e-18 * pow(sMidpoint, 9)) + (1.29466529825287e-17 * pow(sMidpoint, 10))
	magVal = magVal + (1.20738451272334e-22 * pow(sMidpoint, 11)) + (-1.03762546194828e-21 * pow(sMidpoint, 12))
	magVal = magVal * 1e5
	Ku1.setRegion(i, magVal)
}
j_stt41 := -0.00000e+00
j_sot41 := -0.00000e+00
J = vector(j_stt41, 0, j_sot41)
tau_RE = (alpha_R * (j_stt41 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x42 := -0.00000e+00
j_stt42 := -0.00000e+00
j_sot42 := -0.00000e+00
J = vector(j_stt42, 0, j_sot42)
tau_RE = (alpha_R * (j_stt42 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x43 := -0.00000e+00
j_stt43 := -0.00000e+00
j_sot43 := -0.00000e+00
J = vector(j_stt43, 0, j_sot43)
tau_RE = (alpha_R * (j_stt43 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x44 := -0.00000e+00
j_stt44 := -0.00000e+00
j_sot44 := -0.00000e+00
J = vector(j_stt44, 0, j_sot44)
tau_RE = (alpha_R * (j_stt44 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x45 := -0.00000e+00
j_stt45 := -0.00000e+00
j_sot45 := -0.00000e+00
J = vector(j_stt45, 0, j_sot45)
tau_RE = (alpha_R * (j_stt45 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x46 := -0.00000e+00
j_stt46 := -0.00000e+00
j_sot46 := -0.00000e+00
J = vector(j_stt46, 0, j_sot46)
tau_RE = (alpha_R * (j_stt46 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x47 := -0.00000e+00
j_stt47 := -0.00000e+00
j_sot47 := -0.00000e+00
J = vector(j_stt47, 0, j_sot47)
tau_RE = (alpha_R * (j_stt47 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x48 := -0.00000e+00
j_stt48 := -0.00000e+00
j_sot48 := -0.00000e+00
J = vector(j_stt48, 0, j_sot48)
tau_RE = (alpha_R * (j_stt48 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x49 := -0.00000e+00
j_stt49 := -0.00000e+00
j_sot49 := -0.00000e+00
J = vector(j_stt49, 0, j_sot49)
tau_RE = (alpha_R * (j_stt49 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x50 := -0.00000e+00
j_stt50 := -0.00000e+00
j_sot50 := -0.00000e+00
J = vector(j_stt50, 0, j_sot50)
tau_RE = (alpha_R * (j_stt50 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x51 := -0.00000e+00
j_stt51 := -0.00000e+00
j_sot51 := -0.00000e+00
J = vector(j_stt51, 0, j_sot51)
tau_RE = (alpha_R * (j_stt51 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x52 := -0.00000e+00
j_stt52 := -0.00000e+00
j_sot52 := -0.00000e+00
J = vector(j_stt52, 0, j_sot52)
tau_RE = (alpha_R * (j_stt52 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x53 := -0.00000e+00
j_stt53 := -0.00000e+00
j_sot53 := -0.00000e+00
J = vector(j_stt53, 0, j_sot53)
tau_RE = (alpha_R * (j_stt53 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x54 := -0.00000e+00
j_stt54 := -0.00000e+00
j_sot54 := -0.00000e+00
J = vector(j_stt54, 0, j_sot54)
tau_RE = (alpha_R * (j_stt54 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x55 := -0.00000e+00
j_stt55 := -0.00000e+00
j_sot55 := -0.00000e+00
J = vector(j_stt55, 0, j_sot55)
tau_RE = (alpha_R * (j_stt55 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x56 := -0.00000e+00
j_stt56 := -0.00000e+00
j_sot56 := -0.00000e+00
J = vector(j_stt56, 0, j_sot56)
tau_RE = (alpha_R * (j_stt56 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x57 := -0.00000e+00
j_stt57 := -0.00000e+00
j_sot57 := -0.00000e+00
J = vector(j_stt57, 0, j_sot57)
tau_RE = (alpha_R * (j_stt57 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x58 := -0.00000e+00
j_stt58 := -0.00000e+00
j_sot58 := -0.00000e+00
J = vector(j_stt58, 0, j_sot58)
tau_RE = (alpha_R * (j_stt58 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x59 := -0.00000e+00
j_stt59 := -0.00000e+00
j_sot59 := -0.00000e+00
J = vector(j_stt59, 0, j_sot59)
tau_RE = (alpha_R * (j_stt59 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x60 := -0.00000e+00
j_stt60 := -0.00000e+00
j_sot60 := -0.00000e+00
J = vector(j_stt60, 0, j_sot60)
tau_RE = (alpha_R * (j_stt60 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x61 := -0.00000e+00
j_stt61 := -0.00000e+00
j_sot61 := -0.00000e+00
J = vector(j_stt61, 0, j_sot61)
tau_RE = (alpha_R * (j_stt61 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x62 := -0.00000e+00
j_stt62 := -0.00000e+00
j_sot62 := -0.00000e+00
J = vector(j_stt62, 0, j_sot62)
tau_RE = (alpha_R * (j_stt62 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x63 := -0.00000e+00
j_stt63 := -0.00000e+00
j_sot63 := -0.00000e+00
J = vector(j_stt63, 0, j_sot63)
tau_RE = (alpha_R * (j_stt63 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x64 := -0.00000e+00
j_stt64 := -0.00000e+00
j_sot64 := -0.00000e+00
J = vector(j_stt64, 0, j_sot64)
tau_RE = (alpha_R * (j_stt64 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x65 := -0.00000e+00
j_stt65 := -0.00000e+00
j_sot65 := -0.00000e+00
J = vector(j_stt65, 0, j_sot65)
tau_RE = (alpha_R * (j_stt65 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x66 := -0.00000e+00
j_stt66 := -0.00000e+00
j_sot66 := -0.00000e+00
J = vector(j_stt66, 0, j_sot66)
tau_RE = (alpha_R * (j_stt66 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x67 := -0.00000e+00
j_stt67 := -0.00000e+00
j_sot67 := -0.00000e+00
J = vector(j_stt67, 0, j_sot67)
tau_RE = (alpha_R * (j_stt67 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x68 := -0.00000e+00
j_stt68 := -0.00000e+00
j_sot68 := -0.00000e+00
J = vector(j_stt68, 0, j_sot68)
tau_RE = (alpha_R * (j_stt68 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x69 := -0.00000e+00
j_stt69 := -0.00000e+00
j_sot69 := -0.00000e+00
J = vector(j_stt69, 0, j_sot69)
tau_RE = (alpha_R * (j_stt69 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x70 := -0.00000e+00
j_stt70 := -0.00000e+00
j_sot70 := -0.00000e+00
J = vector(j_stt70, 0, j_sot70)
tau_RE = (alpha_R * (j_stt70 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x71 := -0.00000e+00
j_stt71 := -0.00000e+00
j_sot71 := -0.00000e+00
J = vector(j_stt71, 0, j_sot71)
tau_RE = (alpha_R * (j_stt71 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x72 := -0.00000e+00
j_stt72 := -0.00000e+00
j_sot72 := -0.00000e+00
J = vector(j_stt72, 0, j_sot72)
tau_RE = (alpha_R * (j_stt72 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x73 := -0.00000e+00
j_stt73 := -0.00000e+00
j_sot73 := -0.00000e+00
J = vector(j_stt73, 0, j_sot73)
tau_RE = (alpha_R * (j_stt73 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x74 := -0.00000e+00
j_stt74 := -0.00000e+00
j_sot74 := -0.00000e+00
J = vector(j_stt74, 0, j_sot74)
tau_RE = (alpha_R * (j_stt74 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x75 := -0.00000e+00
j_stt75 := -0.00000e+00
j_sot75 := -0.00000e+00
J = vector(j_stt75, 0, j_sot75)
tau_RE = (alpha_R * (j_stt75 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x76 := -0.00000e+00
j_stt76 := -0.00000e+00
j_sot76 := -0.00000e+00
J = vector(j_stt76, 0, j_sot76)
tau_RE = (alpha_R * (j_stt76 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x77 := -0.00000e+00
j_stt77 := -0.00000e+00
j_sot77 := -0.00000e+00
J = vector(j_stt77, 0, j_sot77)
tau_RE = (alpha_R * (j_stt77 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x78 := -0.00000e+00
j_stt78 := -0.00000e+00
j_sot78 := -0.00000e+00
J = vector(j_stt78, 0, j_sot78)
tau_RE = (alpha_R * (j_stt78 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x79 := -0.00000e+00
j_stt79 := -0.00000e+00
j_sot79 := -0.00000e+00
J = vector(j_stt79, 0, j_sot79)
tau_RE = (alpha_R * (j_stt79 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
//********************************************************************//
//Please cite the following references, relevant for your simulation. //
//See bibtex file in output folder for justification.                 //
//********************************************************************//
//   * Vansteenkiste et al., AIP Adv. 4, 107133 (2014).
//   * Leliaert et al., J. Appl. Phys. 115, 233903 (2014)
//   * Mulkers et al., Phys. Rev. B 95, 144401 (2017).
