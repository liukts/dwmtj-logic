//mumax 3.10 [linux_amd64 go1.14(gc) CUDA-11.0]
//GPU info: Quadro RTX 4000(7973MB), CUDA Driver 11.4, cc=7.5, using cc=75 PTX
//(c) Arne Vansteenkiste, Dynamat LAB, Ghent University, Belgium
//This is free software without any warranty. See license.txt
//********************************************************************//
//  If you use mumax in any work or publication,                      //
//  we kindly ask you to cite the references in references.bib        //
//********************************************************************//
//output directory: DWconcat_480729151_2.out/
notch_flag := 0
unotch_only := 0
edge_rough := 0
preload_geom := 0
SnapshotFormat = "png"
Temp = 0
ThermSeed(0)
random_seed := 0
sizeX := 1.35e-07
sizeY := 15e-9
sizeZ := 3e-9
hm_sizeZ := sizeZ
fm_cross_sec := sizeY * sizeZ
hm_cross_sec := sizeY * hm_sizeZ
notch_diam := 8e-9
rough_diam := 1e-9
notch_space_L := 50e-9
w1 := sizeY
w2 := sizeY
angle := Asin(0.5 * (w2 - w1) / sizeX)
notch_space := notch_space_L / cos(angle)
Nx := 135
Ny := 15
magAn := 4.70e+05
setgridsize(Nx, Ny, 1)
setcellsize(sizeX/Nx, sizeY/Ny, sizeZ)
if preload_geom == 1 {
	setGeom(imageShape("STTPMA_rough.png"))
} else {
	if edge_rough == 1 {
		maxrect := sizeX / rough_diam
		xcenter := -0.5 * (sizeX - rough_diam)
		xheight := (xcenter+(0.5*sizeX))*((w2-w1)/sizeX) + w1
		baserect := rect(rough_diam, w1+(0.5*rough_diam*randNorm())).transl(xcenter, 0.5*rough_diam*randNorm(), 0)
		for i := 1; i < maxrect; i++ {
			randSeed(random_seed)
			random_seed += 1
			xcenter = xcenter + rough_diam
			xheight = (xcenter+(0.5*sizeX))*((w2-w1)/sizeX) + w1
			baserect = baserect.add(rect(rough_diam, xheight+(0.5*rough_diam*randNorm())).transl(xcenter, 0.5*rough_diam*randNorm(), 0))
		}
		if notch_flag == 1 {
			notch := circle(notch_diam).repeat(25e-9, 0, 0)
			unotch := notch.transl(0, 0.25*(w1+w2), 0).rotz(angle)
			lnotch := notch.transl(0, -0.25*(w1+w2), 0).rotz(-angle)
			setGeom(baserect.sub(unotch).sub(lnotch))
			saveAs(geom, "SOTPMA_rough_notch")
		} else {
			setGeom(baserect)
			saveAs(geom, "SOTPMA_rough")
		}
	} else {
		uhrect := rect(2*sizeX, sizeY).sub(rect(2*sizeX, 0.5*sizeY).transl(0, -0.25*sizeY, 0))
		utilt := uhrect.transl(0, 0.25*(w1+w2), 0).rotz(angle)
		lhrect := rect(2*sizeX, sizeY).sub(rect(2*sizeX, 0.5*sizeY).transl(0, 0.25*sizeY, 0))
		ltilt := lhrect.transl(0, -0.25*(w1+w2), 0).rotz(-angle)
		baserect := rect(sizeX, sizeY).sub(utilt).sub(ltilt)
		if notch_flag == 1 {
			notch := circle(notch_diam).repeat(notch_space, 0, 0).transl(0.5*notch_space_L, 0, 0)
			if unotch_only == 1 {
				unotch := notch.transl(0, 0.25*(w1+w2), 0).rotz(angle)
				setGeom(baserect.sub(unotch))
				saveAs(geom, "STTPMA_smooth_notch")
			} else if unotch_only == -1 {
				lnotch := notch.transl(0, -0.25*(w1+w2), 0).rotz(-angle)
				setGeom(baserect.sub(lnotch))
				saveAs(geom, "STTPMA_smooth_notch")
			} else {
				unotch := notch.transl(0, 0.25*(w1+w2), 0).rotz(angle)
				lnotch := notch.transl(0, -0.25*(w1+w2), 0).rotz(-angle)
				setGeom(baserect.sub(unotch).sub(lnotch))
				saveAs(geom, "STTPMA_smooth_notch")
			}
		} else {
			setGeom(baserect)
			saveAs(geom, "SOTPMA_smooth")
		}
	}
}
fixed_w := 5.00e-09
grainSize := 1e-9
randomSeed := 480729151
maxRegion := 253
regionWidth := (sizeX - 2*fixed_w) / maxRegion
randK := 0.0125
varK := 0.025
offsetDistance := 2.25e-08
oxideWidth := 1.50e-08
for i := 0; i <= maxRegion; i++ {
	xLoc := (i * regionWidth) - (0.5 * sizeX) + fixed_w
	midpoint := xLoc + regionWidth/2
	defregion(i, rect(regionWidth, sizeY).transl(midpoint, 0, 0))
	sMidpoint := midpoint / 1e-9
	magVal := 4.88074019590981 + (-2.99219411611410e-05 * sMidpoint) + (-0.000432730246558269 * pow(sMidpoint, 2))
	magVal = magVal + (6.89289264204922e-08 * pow(sMidpoint, 3)) + (2.72096040781391e-07 * pow(sMidpoint, 4))
	magVal = magVal + (-4.84756604766916e-11 * pow(sMidpoint, 5)) + (2.27421161847804e-11 * pow(sMidpoint, 6))
	magVal = magVal + (1.48725794080439e-14 * pow(sMidpoint, 7)) + (-5.07091377189594e-14 * pow(sMidpoint, 8))
	magVal = magVal + (-2.15271398114348e-18 * pow(sMidpoint, 9)) + (1.29466529825287e-17 * pow(sMidpoint, 10))
	magVal = magVal + (1.20738451272334e-22 * pow(sMidpoint, 11)) + (-1.03762546194828e-21 * pow(sMidpoint, 12))
	magVal = magVal * 1e5
	Ku1.setRegion(i, magVal)
}
defregion(254, rect(fixed_w, sizeY).transl(-((0.5*sizeX)-(0.5*fixed_w)), 0, 0))
defregion(255, rect(fixed_w, sizeY).transl(((0.5*sizeX)-(0.5*fixed_w)), 0, 0))
startpos := 3.50e-08
m = TwoDomain(0, 0, 1, 1, 0, 0, 0, 0, -1).transl(-(0.5*sizeX)+startpos+fixed_w, 0, 0)
m.setRegion(254, uniform(0, 0, 1))
m.setRegion(255, uniform(0, 0, -1))
frozenspins.setRegion(254, 254)
frozenspins.setRegion(255, 255)
EdgeSmooth = 8
Ms := 800e3
Msat = Ms
Aex = 1.3e-11
al := 0.05
alpha = al
AnisU = vector(0, 0, 1)
dmi := -0.5e-3
Dind = dmi
Xi = 0.05
stt_P := 0.7
sot_P := 0.2
scale2hm := sot_P / stt_P
pol = sot_P
u_B := 9.274e-24
alpha_R := 2e-30
lambda = 1
epsilonprime = 0
fixedlayer = vector(0, -1, 0)
I_pulse := -8e-6
I := I_pulse
fm2hm := 0.5
j_fm := 0.0
j_hm := 0.0
relax()
mx_mid := cropY(m.Comp(2), floor(Ny/2), floor(Ny/2+1))
tableAdd(mx_mid)
tableAddVar(I, "I_x", "A")
tableautosave(10e-12)
tau_RE := 0.00000
dt_step := 0.05e-09
j_x0 := -0.00000e+00
J = vector(0, 0, j_x0)
tau_RE = (alpha_R * (j_x0 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x1 := -0.00000e+00
J = vector(0, 0, j_x1)
tau_RE = (alpha_R * (j_x1 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x2 := -0.00000e+00
J = vector(0, 0, j_x2)
tau_RE = (alpha_R * (j_x2 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x3 := -0.00000e+00
J = vector(0, 0, j_x3)
tau_RE = (alpha_R * (j_x3 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x4 := -0.00000e+00
J = vector(0, 0, j_x4)
tau_RE = (alpha_R * (j_x4 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x5 := -0.00000e+00
J = vector(0, 0, j_x5)
tau_RE = (alpha_R * (j_x5 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x6 := -0.00000e+00
J = vector(0, 0, j_x6)
tau_RE = (alpha_R * (j_x6 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x7 := -0.00000e+00
J = vector(0, 0, j_x7)
tau_RE = (alpha_R * (j_x7 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x8 := -0.00000e+00
J = vector(0, 0, j_x8)
tau_RE = (alpha_R * (j_x8 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x9 := -0.00000e+00
J = vector(0, 0, j_x9)
tau_RE = (alpha_R * (j_x9 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x10 := -0.00000e+00
J = vector(0, 0, j_x10)
tau_RE = (alpha_R * (j_x10 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x11 := -0.00000e+00
J = vector(0, 0, j_x11)
tau_RE = (alpha_R * (j_x11 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x12 := -0.00000e+00
J = vector(0, 0, j_x12)
tau_RE = (alpha_R * (j_x12 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x13 := -0.00000e+00
J = vector(0, 0, j_x13)
tau_RE = (alpha_R * (j_x13 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x14 := -0.00000e+00
J = vector(0, 0, j_x14)
tau_RE = (alpha_R * (j_x14 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x15 := -0.00000e+00
J = vector(0, 0, j_x15)
tau_RE = (alpha_R * (j_x15 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x16 := -0.00000e+00
J = vector(0, 0, j_x16)
tau_RE = (alpha_R * (j_x16 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x17 := -0.00000e+00
J = vector(0, 0, j_x17)
tau_RE = (alpha_R * (j_x17 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x18 := -0.00000e+00
J = vector(0, 0, j_x18)
tau_RE = (alpha_R * (j_x18 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x19 := -0.00000e+00
J = vector(0, 0, j_x19)
tau_RE = (alpha_R * (j_x19 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x20 := -5.92686e-04
ext_makegrains(grainSize, maxRegion, randomSeed)
for i := 0; i <= maxRegion; i++ {
	Ku1.setRegion(i, 5e5+((2*(rand()-0.5))*5e5*varK))
}
J = vector(0, 0, j_x20)
tau_RE = (alpha_R * (j_x20 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x21 := -2.87000e+10
J = vector(0, 0, j_x21)
tau_RE = (alpha_R * (j_x21 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x22 := -2.87000e+10
J = vector(0, 0, j_x22)
tau_RE = (alpha_R * (j_x22 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x23 := -2.87000e+10
J = vector(0, 0, j_x23)
tau_RE = (alpha_R * (j_x23 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x24 := -2.87000e+10
J = vector(0, 0, j_x24)
tau_RE = (alpha_R * (j_x24 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x25 := -2.87000e+10
J = vector(0, 0, j_x25)
tau_RE = (alpha_R * (j_x25 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x26 := -2.87000e+10
J = vector(0, 0, j_x26)
tau_RE = (alpha_R * (j_x26 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x27 := -2.87000e+10
J = vector(0, 0, j_x27)
tau_RE = (alpha_R * (j_x27 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x28 := -2.87000e+10
J = vector(0, 0, j_x28)
tau_RE = (alpha_R * (j_x28 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x29 := -2.72570e+10
J = vector(0, 0, j_x29)
tau_RE = (alpha_R * (j_x29 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x30 := -1.83614e+10
J = vector(0, 0, j_x30)
tau_RE = (alpha_R * (j_x30 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x31 := -1.37271e+10
J = vector(0, 0, j_x31)
tau_RE = (alpha_R * (j_x31 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x32 := -1.08746e+10
J = vector(0, 0, j_x32)
tau_RE = (alpha_R * (j_x32 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x33 := -9.56667e+09
J = vector(0, 0, j_x33)
tau_RE = (alpha_R * (j_x33 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x34 := -9.56667e+09
J = vector(0, 0, j_x34)
tau_RE = (alpha_R * (j_x34 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x35 := -9.56667e+09
J = vector(0, 0, j_x35)
tau_RE = (alpha_R * (j_x35 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x36 := -9.56667e+09
J = vector(0, 0, j_x36)
tau_RE = (alpha_R * (j_x36 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x37 := -9.56667e+09
J = vector(0, 0, j_x37)
tau_RE = (alpha_R * (j_x37 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x38 := -9.56667e+09
J = vector(0, 0, j_x38)
tau_RE = (alpha_R * (j_x38 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x39 := -9.56667e+09
J = vector(0, 0, j_x39)
tau_RE = (alpha_R * (j_x39 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x40 := -3.96350e-04
J = vector(0, 0, j_x40)
tau_RE = (alpha_R * (j_x40 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x41 := -0.00000e+00
for i := 0; i <= maxRegion; i++ {
	xLoc := (i * regionWidth) - (0.5 * sizeX) + fixed_w
	midpoint := xLoc + regionWidth/2
	defregion(i, rect(regionWidth, sizeY).transl(midpoint, 0, 0))
	sMidpoint := midpoint / 1e-9
	magVal := 4.88074019590981 + (-2.99219411611410e-05 * sMidpoint) + (-0.000432730246558269 * pow(sMidpoint, 2))
	magVal = magVal + (6.89289264204922e-08 * pow(sMidpoint, 3)) + (2.72096040781391e-07 * pow(sMidpoint, 4))
	magVal = magVal + (-4.84756604766916e-11 * pow(sMidpoint, 5)) + (2.27421161847804e-11 * pow(sMidpoint, 6))
	magVal = magVal + (1.48725794080439e-14 * pow(sMidpoint, 7)) + (-5.07091377189594e-14 * pow(sMidpoint, 8))
	magVal = magVal + (-2.15271398114348e-18 * pow(sMidpoint, 9)) + (1.29466529825287e-17 * pow(sMidpoint, 10))
	magVal = magVal + (1.20738451272334e-22 * pow(sMidpoint, 11)) + (-1.03762546194828e-21 * pow(sMidpoint, 12))
	magVal = magVal * 1e5
	Ku1.setRegion(i, magVal)
}
J = vector(0, 0, j_x41)
tau_RE = (alpha_R * (j_x41 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x42 := -0.00000e+00
J = vector(0, 0, j_x42)
tau_RE = (alpha_R * (j_x42 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x43 := -0.00000e+00
J = vector(0, 0, j_x43)
tau_RE = (alpha_R * (j_x43 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x44 := -0.00000e+00
J = vector(0, 0, j_x44)
tau_RE = (alpha_R * (j_x44 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x45 := -0.00000e+00
J = vector(0, 0, j_x45)
tau_RE = (alpha_R * (j_x45 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x46 := -0.00000e+00
J = vector(0, 0, j_x46)
tau_RE = (alpha_R * (j_x46 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x47 := -0.00000e+00
J = vector(0, 0, j_x47)
tau_RE = (alpha_R * (j_x47 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x48 := -0.00000e+00
J = vector(0, 0, j_x48)
tau_RE = (alpha_R * (j_x48 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x49 := -0.00000e+00
J = vector(0, 0, j_x49)
tau_RE = (alpha_R * (j_x49 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x50 := -0.00000e+00
J = vector(0, 0, j_x50)
tau_RE = (alpha_R * (j_x50 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x51 := -0.00000e+00
J = vector(0, 0, j_x51)
tau_RE = (alpha_R * (j_x51 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x52 := -0.00000e+00
J = vector(0, 0, j_x52)
tau_RE = (alpha_R * (j_x52 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x53 := -0.00000e+00
J = vector(0, 0, j_x53)
tau_RE = (alpha_R * (j_x53 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x54 := -0.00000e+00
J = vector(0, 0, j_x54)
tau_RE = (alpha_R * (j_x54 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x55 := -0.00000e+00
J = vector(0, 0, j_x55)
tau_RE = (alpha_R * (j_x55 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x56 := -0.00000e+00
J = vector(0, 0, j_x56)
tau_RE = (alpha_R * (j_x56 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x57 := -0.00000e+00
J = vector(0, 0, j_x57)
tau_RE = (alpha_R * (j_x57 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x58 := -0.00000e+00
J = vector(0, 0, j_x58)
tau_RE = (alpha_R * (j_x58 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x59 := -0.00000e+00
J = vector(0, 0, j_x59)
tau_RE = (alpha_R * (j_x59 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x60 := -0.00000e+00
J = vector(0, 0, j_x60)
tau_RE = (alpha_R * (j_x60 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x61 := -0.00000e+00
J = vector(0, 0, j_x61)
tau_RE = (alpha_R * (j_x61 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x62 := -0.00000e+00
J = vector(0, 0, j_x62)
tau_RE = (alpha_R * (j_x62 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x63 := -0.00000e+00
J = vector(0, 0, j_x63)
tau_RE = (alpha_R * (j_x63 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x64 := -0.00000e+00
J = vector(0, 0, j_x64)
tau_RE = (alpha_R * (j_x64 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x65 := -0.00000e+00
J = vector(0, 0, j_x65)
tau_RE = (alpha_R * (j_x65 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x66 := -0.00000e+00
J = vector(0, 0, j_x66)
tau_RE = (alpha_R * (j_x66 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x67 := -0.00000e+00
J = vector(0, 0, j_x67)
tau_RE = (alpha_R * (j_x67 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x68 := -0.00000e+00
J = vector(0, 0, j_x68)
tau_RE = (alpha_R * (j_x68 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x69 := -0.00000e+00
J = vector(0, 0, j_x69)
tau_RE = (alpha_R * (j_x69 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x70 := -0.00000e+00
J = vector(0, 0, j_x70)
tau_RE = (alpha_R * (j_x70 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x71 := -0.00000e+00
J = vector(0, 0, j_x71)
tau_RE = (alpha_R * (j_x71 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x72 := -0.00000e+00
J = vector(0, 0, j_x72)
tau_RE = (alpha_R * (j_x72 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x73 := -0.00000e+00
J = vector(0, 0, j_x73)
tau_RE = (alpha_R * (j_x73 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x74 := -0.00000e+00
J = vector(0, 0, j_x74)
tau_RE = (alpha_R * (j_x74 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x75 := -0.00000e+00
J = vector(0, 0, j_x75)
tau_RE = (alpha_R * (j_x75 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x76 := -0.00000e+00
J = vector(0, 0, j_x76)
tau_RE = (alpha_R * (j_x76 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x77 := -0.00000e+00
J = vector(0, 0, j_x77)
tau_RE = (alpha_R * (j_x77 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x78 := -0.00000e+00
J = vector(0, 0, j_x78)
tau_RE = (alpha_R * (j_x78 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
j_x79 := -0.00000e+00
J = vector(0, 0, j_x79)
tau_RE = (alpha_R * (j_x79 / 2) * stt_P) / (u_B * Ms)
B_ext = vector(0, tau_RE, 0)
run(dt_step)
//********************************************************************//
//Please cite the following references, relevant for your simulation. //
//See bibtex file in output folder for justification.                 //
//********************************************************************//
//   * Vansteenkiste et al., AIP Adv. 4, 107133 (2014).
//   * Leliaert et al., J. Appl. Phys. 115, 233903 (2014)
//   * Mulkers et al., Phys. Rev. B 95, 144401 (2017).
